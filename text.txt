Idea for inline editing: 
import React, { useState } from 'react';

interface Task {
  id: number;
  title: string;
  description: string;
}

const TaskItem: React.FC<{ task: Task }> = ({ task }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [taskData, setTaskData] = useState({ title: task.title, description: task.description });

  // This function adjusts the textarea's height based on content
  const autoResize = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    e.target.style.height = 'auto'; // Reset height
    e.target.style.height = `${e.target.scrollHeight}px`; // Set it to fit content
  };

  const handleSave = () => {
    setIsEditing(false);
    // TODO: Save the taskData to the database using an API call
  };

  return (
    <div className="task-item border p-4 mb-4">
      {isEditing ? (
        <>
          <input
            type="text"
            className="border p-2 mb-2 w-full"
            value={taskData.title}
            onChange={(e) => setTaskData({ ...taskData, title: e.target.value })}
            autoFocus
          />
          <textarea
            className="border p-2 mb-2 w-full resize-none overflow-hidden"
            value={taskData.description}
            onChange={(e) => {
              setTaskData({ ...taskData, description: e.target.value });
              autoResize(e); // Adjust height
            }}
            rows={1} // Initial row count
            style={{ height: 'auto' }} // Allow dynamic height adjustment
          />
          <button onClick={handleSave} className="bg-blue-500 text-white py-1 px-4 rounded-md">
            Save
          </button>
        </>
      ) : (
        <>
          <h3 className="text-lg">{taskData.title}</h3>
          <p className="text-gray-700">{taskData.description}</p>
          <button onClick={() => setIsEditing(true)} className="text-blue-500 underline">
            Edit
          </button>
        </>
      )}
    </div>
  );
};

export default TaskItem;

